/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.project;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.view.View;

/**
 *
 * @author Jakub Cieciala
 */
public class Map extends View {

	public int sizeX, sizeY, sizeBlockX, sizeBlockY, level;
	public static final int numX = 24, numY = 18, end = 7, numberMaps = 4;
	Context ctx;
	Paint paint;

	public Map(int sizeX, int sizeY, Context ctx, Paint paint, int level) {
		super(ctx);
		this.sizeX = sizeX;
		this.sizeY = sizeY;
		this.ctx = ctx;
		this.paint = paint;
		this.level = level;
	}

	public int[][] getMap() {
		if (level == 1) {
			return new int[][]{
				{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 5, 2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{31, 2, 2, 2, 6, 0, 0, 0, 1, 0, 0, 1, 0, 0, 5, 2, 2, 2, 6, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 4, 6, 0, 0, 1, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 4, 2, 2, 2, 3, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 1, 0, 0, 0, 0, 10},
				{10, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 8, 0, 1, 0, 0, 4, 2, 2, 7, 0, 10},
				{10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 2, 2, 2, 2, 2, 6, 0, 10},
				{10, 0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 2, 6, 0, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 6, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 4, 2, 2, 2, 2, 2, 3, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 19, 20, 15, 16, 11, 12},
				{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 0, 29, 0, 22, 21, 18, 17, 14, 13}
			};
		} else if (level == 2) {
			return new int[][]{
				{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 10},
				{10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10},
				{31, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10},
				{10, 0, 5, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 10},
				{10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 19, 20, 15, 16, 11, 12},
				{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 0, 29, 0, 22, 21, 18, 17, 14, 13}
			};
		} else if (level == 3) {
			return new int[][]{
				{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{31, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0, 0, 0, 8, 0, 0, 0, 5, 2, 2, 6, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10},
				{10, 0, 5, 2, 2, 2, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 1, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 3, 0, 10},
				{10, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 19, 20, 15, 16, 11, 12},
				{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 30, 0, 29, 0, 22, 21, 18, 17, 14, 13}
			};
		}else if (level == 4) {
			return new int[][]{
				{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{31, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 10},
				{10, 0, 1, 0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 1, 0, 1, 0, 10},
				{10, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 10},
				{10, 0, 1, 0, 1, 0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 7, 0, 1, 0, 1, 0, 1, 0, 10},
				{10, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 10},
				{10, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 10},
				{10, 0, 1, 0, 1, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 1, 0, 1, 0, 10},
				{10, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 10},
				{10, 0, 1, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 1, 0, 10},
				{10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10},
				{10, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 19, 20, 15, 16, 11, 12},
				{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 0, 29, 0, 22, 21, 18, 17, 14, 13}
			};
		} else {
			return new int[][]{
				{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10},
				{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 19, 20, 15, 16, 11, 12},
				{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 0, 29, 0, 22, 21, 18, 17, 14, 13}
			};
		}
	}

	public String[] items = new String[]{
		"grass", //             //0
		"roaddown", //			//1  |
		"roadright", //			//2  -
		"turndownleft", //		//3  _|
		"turndownright", //		//4  |_
		"turnleftdown", //		//5  |¨
		"turnrightdown", //		//6  ¨|
		"end", //				//7
		"stone", //				//8
		"crossing", //			// 9 +
		"bgtree", //			// 10  strom na pozadi
		"tower_one_one",//		// 11 věžka levý horní
		"tower_one_two",//		// 12 věžka pravý horní
		"tower_one_three",//	// 13 věžka pravý dolní
		"tower_one_four",//		// 14 věžka levý doelní
		"tower_two_one",//		// 15 věžka levý horní
		"tower_two_two",//		// 16 věžka pravý horní
		"tower_two_three",//	// 17 věžka pravý dolní
		"tower_two_four",//		// 18 věžka levý doelní
		"tower_three_one",//	// 19 věžka levý horní
		"tower_three_two",//	// 20 věžka pravý horní
		"tower_three_three",//	// 21 věžka pravý dolní
		"tower_three_four",//	// 22 věžka levý doelní
		"tower_one", "tower_two", "tower_three",// 23,24,25 (zprava doleva věžky)
		"coin_left_top", "coin_right_top", "coin_right_down", "coin_left_down", // 26,27,28,29 - mince
		"hearth", // 30 srdce
		"road_start", //31 start
		"cross"};

	public Bitmap draw(int level) {
		this.level = level;
		sizeBlockX = sizeX / numX;
		sizeBlockY = sizeY / numY;
		Bitmap temp = Bitmap.createBitmap(sizeX, sizeY, Bitmap.Config.ARGB_8888);
		Canvas canvas = new Canvas(temp);

		for (int row = 0; row < getMap().length; row++) {
			for (int column = 0; column < getMap()[row].length; column++) {
				int ide = ctx.getResources().getIdentifier(items[getMap()[row][column]], "drawable", "com.project");
				Bitmap imgB = BitmapFactory.decodeResource(ctx.getResources(), ide);
				Bitmap img = Bitmap.createScaledBitmap(imgB, sizeBlockX, sizeBlockY, true);
				canvas.drawBitmap(img, sizeBlockX * column, sizeBlockY * row, paint);
			}
		}
		return temp;

	}

	public Bitmap drawByArray(int[][] mapArr) {
		sizeBlockX = sizeX / numX;
		sizeBlockY = sizeY / numY;
		Bitmap temp = Bitmap.createBitmap(sizeX, sizeY, Bitmap.Config.ARGB_8888);
		Canvas canvas = new Canvas(temp);

		for (int row = 0; row < mapArr.length; row++) {
			for (int column = 0; column < mapArr[row].length; column++) {
				int ide = ctx.getResources().getIdentifier(items[mapArr[row][column]], "drawable", "com.project");
				Bitmap imgB = BitmapFactory.decodeResource(ctx.getResources(), ide);
				Bitmap img = Bitmap.createScaledBitmap(imgB, sizeBlockX, sizeBlockY, true);
				canvas.drawBitmap(img, sizeBlockX * column, sizeBlockY * row, paint);
			}
		}
		return temp;
	}

	public int getStart() {
		for (int row = 0; row < getMap().length; row++) {
			if (getMap()[row][0] == 31) {
				return row;
			}
		}
		return 0;
	}

}
